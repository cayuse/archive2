# Dockerfile Setup Notes for PostgreSQL & Active Storage

## 1. Install PostgreSQL Client Libraries
Add this to your Dockerfile before running `bundle install`:

```
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y libpq-dev postgresql-client && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives
```

## 2. Ensure the `pg` Gem is in your Gemfile
```
gem "pg", "~> 1.1"
```

## 3. Ensure the `image_processing` Gem is in your Gemfile for Active Storage
```
gem "image_processing", "~> 1.2"
```

## 4. Update `config/database.yml` for PostgreSQL
See the main README or config/database.yml for the correct format.

## 5. Set Environment Variables
Make sure to set these in your Docker/Kamal/production environment:
- `POSTGRES_USER`
- `POSTGRES_PASSWORD`
- `POSTGRES_HOST`
- `POSTGRES_PORT`

## 6. Run Active Storage Install
```
bin/rails active_storage:install
```

## 7. Migrate the Database
```
bin/rails db:migrate
```

## 8. Expose PostgreSQL Port (if needed)
If you want to connect to the DB from outside the container, expose port 5432:
```
EXPOSE 5432
```

## 9. Troubleshooting
- If the `pg` gem fails to install, make sure `libpq-dev` is present in the image.
- If you get connection errors, check your environment variables and DB service.

---

**Remember:**
- Always rebuild your Docker image after changing system dependencies or the Gemfile.
- Document any changes in MIGRATIONS.md and README.md for future reference.

---

# Docker Installation Requirements

## Prerequisites for Docker Setup

### 1. Install Docker and Docker Compose
If Docker is not installed in your environment:

```bash
# Update package list
sudo apt-get update

# Install Docker
sudo apt-get install -y docker.io

# Install Docker Compose
sudo apt-get install -y docker-compose

# Add your user to the docker group (to run without sudo)
sudo usermod -aG docker $USER

# Start Docker service
sudo systemctl start docker
sudo systemctl enable docker
```

### 2. Alternative: Use Docker's Official Installation Script
```bash
# Install Docker using official script
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh

# Install Docker Compose
sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
```

### 3. Verify Installation
```bash
# Check Docker version
docker --version

# Check Docker Compose version
docker-compose --version

# Test Docker
docker run hello-world
```

### 4. Troubleshooting Docker Installation

#### Permission Issues
```bash
# If you get permission errors, add user to docker group
sudo usermod -aG docker $USER

# Then log out and back in, or run:
newgrp docker
```

#### Service Issues
```bash
# Check if Docker service is running
sudo systemctl status docker

# Start Docker service if not running
sudo systemctl start docker
```

#### Dev Container Issues
If running in a dev container, you might need to:
- Install Docker inside the dev container
- Use Docker-in-Docker (DinD) feature
- Or run Docker commands from the host system

**IMPORTANT: Dev Container Docker Limitations**
If you're running in a dev container (like VS Code's dev container), Docker may not work directly because:
- The Docker daemon isn't running inside the dev container
- The Docker socket (`/var/run/docker.sock`) isn't mounted
- Systemd isn't available in the container

**Solutions:**

1. **Use Host Docker (Recommended):**
   ```bash
   # Run Docker commands from the host system
   # Exit the dev container and run from your host machine
   ```

2. **Configure Dev Container for Docker:**
   Update `.devcontainer/devcontainer.json` to include:
   ```json
   {
     "features": {
       "ghcr.io/devcontainers/features/docker-in-docker:2": {}
     }
   }
   ```

3. **Alternative: Use Rails Development Server:**
   ```bash
   # Instead of Docker, use Rails directly in dev container
   cd archive
   bundle install
   bin/rails db:setup
   bin/rails server
   ```

4. **Use Docker from Host:**
   - Open a terminal on your host machine
   - Navigate to the project directory
   - Run `docker-compose up --build`

---

# Bringing the System Online from Scratch

## Prerequisites
- Docker and Docker Compose installed (see Docker Installation Requirements above)
- Git repository cloned
- Valid `RAILS_MASTER_KEY` (get from `archive/config/master.key`)

## Step-by-Step Setup

### 1. Clone and Navigate to Project
```bash
git clone <your-repo-url>
cd dockercrap
```

### 2. Set Environment Variables
Create a `.env` file in the project root (optional, for custom values):
```bash
# .env
RAILS_MASTER_KEY=your_master_key_here
POSTGRES_USER=postgres
POSTGRES_PASSWORD=password
POSTGRES_HOST=db
POSTGRES_PORT=5432
```

### 3. Build and Start Containers
```bash
# Build the Docker image with all dependencies and start services
docker-compose up --build
```

This will:
- Build the Rails app image with PostgreSQL support
- Start PostgreSQL database container
- Start Rails app container
- Set up networking between containers
- **Automatically install Active Storage and run migrations**
- Expose Rails app on http://localhost:3000

### 4. Set Up Database (in new terminal)
```bash
# Create and migrate the database
docker-compose exec web bin/rails db:setup

# Or if you have existing migrations:
docker-compose exec web bin/rails db:migrate

# Seed the database (if you have seeds):
docker-compose exec web bin/rails db:seed
```

### 5. Install Active Storage (if not done)
```bash
docker-compose exec web bin/rails active_storage:install
docker-compose exec web bin/rails db:migrate
```

**Note:** Active Storage installation and database migrations are now automatically run when the containers start up.

### 6. Precompile Assets (for production)
```bash
docker-compose exec web bin/rails assets:precompile
```

## Useful Commands

### Development
```bash
# View logs
docker-compose logs -f web

# Access Rails console
docker-compose exec web bin/rails console

# Run tests
docker-compose exec web bin/rails test

# Generate new migration
docker-compose exec web bin/rails generate migration CreateSomething
```

### Production
```bash
# Build for production
docker build -t archive ./archive

# Run production container
docker run -d -p 80:80 \
  -e RAILS_ENV=production \
  -e RAILS_MASTER_KEY=your_key \
  -e DATABASE_URL=postgres://user:pass@host:5432/db \
  archive
```

### Troubleshooting

#### Container Issues
```bash
# Check container status
docker-compose ps

# View container logs
docker-compose logs web
docker-compose logs db

# Restart services
docker-compose restart

# Rebuild from scratch
docker-compose down
docker-compose up --build
```

#### Database Issues
```bash
# Reset database
docker-compose exec web bin/rails db:reset

# Drop and recreate
docker-compose exec web bin/rails db:drop db:create db:migrate

# Check database connection
docker-compose exec web bin/rails db:version
```

#### Permission Issues
```bash
# Fix file permissions
sudo chown -R $USER:$USER archive/
```

## Environment Variables Reference

### Required for Production
- `RAILS_MASTER_KEY`: Rails master key for credentials
- `DATABASE_URL`: PostgreSQL connection string
- `RAILS_ENV`: Set to "production"

### Optional
- `POSTGRES_USER`: Database username (default: postgres)
- `POSTGRES_PASSWORD`: Database password (default: password)
- `POSTGRES_HOST`: Database host (default: localhost)
- `POSTGRES_PORT`: Database port (default: 5432)

## File Structure
```
dockercrap/
├── docker-compose.yml          # Multi-container setup
├── archive/                    # Rails application
│   ├── Dockerfile             # Production container (with PostgreSQL support)
│   ├── config/database.yml    # Database configuration
│   └── Gemfile               # Dependencies
├── .devcontainer/             # Development container config
├── Dockerfile.old             # Old Dockerfile (renamed)
└── notes.txt                 # This file
```

## Quick Commands Reference

```bash
# Start everything (includes automatic setup)
docker-compose up --build

# Stop everything
docker-compose down

# View logs
docker-compose logs -f

# Access Rails console
docker-compose exec web bin/rails console

# Run migrations
docker-compose exec web bin/rails db:migrate

# Restart just the web service
docker-compose restart web
```

## Automatic Setup

The environment now automatically:
- Installs Active Storage when containers start
- Runs database migrations
- Sets up PostgreSQL with correct credentials
- Starts the Rails server

**For Dev Container:**
- Active Storage installation and migrations run in `postCreateCommand`
- Database is ready when the container opens

**For Docker Compose:**
- Active Storage installation and migrations run in the container's `command`
- Database is ready when the web service starts 