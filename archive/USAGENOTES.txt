# Music Archive App - Usage Notes & Helpful Hints

## 🎵 Quick Start

1. **Start the app**: `docker-compose up` (from host) or `rails server` (in devcontainer)
2. **Access the app**: http://localhost:3000
3. **Database console**: `rails console` or `rails dbconsole`

## 📚 Model Relationships & Associations

### Core Models
- **Users** (with roles: user, moderator, admin)
- **Artists** (musicians/bands)
- **Genres** (music categories)
- **Albums** (belong to artists, can have multiple genres)
- **Songs** (belong to albums and genres, have audio files)
- **Playlists** (belong to users, can contain multiple songs)

### Key Associations
```
User → has_many → Playlists
Artist → has_many → Albums
Album → belongs_to → Artist
Album → has_many → Songs
Song → belongs_to → Album
Song → belongs_to → Genre
Genre → has_many → Songs
Playlist → belongs_to → User
Playlist → has_many → Songs (through playlists_songs)
```

## 🎯 5 Essential Usage Hints

### 1. **Creating Data with Associations**
```ruby
# Create a complete song with all associations
artist = Artist.create(name: "The Beatles", country: "UK")
album = Album.create(title: "Abbey Road", artist: artist, release_date: "1969-09-26")
genre = Genre.create(name: "Rock", color: "#FF0000")
song = Song.create(
  title: "Come Together",
  album: album,
  genre: genre,
  track_number: 1,
  duration: 259
)
```

### 2. **Querying with Scopes**
```ruby
# Find songs by genre
rock_songs = Song.by_genre_name("Rock")
recent_songs = Song.recent.limit(10)

# Find albums by artist
beatles_albums = Album.joins(:artist).where(artists: { name: "The Beatles" })

# Find playlists by user
user_playlists = Playlist.where(user: current_user)
```

### 3. **Active Storage for Audio Files**
```ruby
# Attach audio file to song
song.audio_file.attach(
  io: File.open("path/to/song.mp3"),
  filename: "song.mp3",
  content_type: "audio/mpeg"
)

# Check if file is attached
if song.audio_file.attached?
  song.audio_file.url  # Get download URL
end
```

### 4. **User Roles & Authorization**
```ruby
# Check user roles
user.admin?      # true/false
user.moderator?  # true/false
user.user?       # true/false

# Filter by role
admins = User.where(role: :admin)
moderators = User.where(role: :moderator)
```

### 5. **Database Constraints & Validations**
```ruby
# Validations are enforced at model level
song = Song.new(title: "")  # Will fail validation
song.valid?  # false
song.errors.full_messages  # ["Title can't be blank", "Genre must exist"]

# Database constraints prevent invalid data
# - Songs must have a genre (foreign key constraint)
# - Track numbers must be positive
# - File sizes must be positive
```

## 🔧 Development Tips

### Database Operations
```bash
# Reset database
rails db:drop db:create db:migrate db:seed

# View schema
rails db:schema:dump

# Run specific migration
rails db:migrate:up VERSION=20250714044230
```

### Rails Console Tricks
```ruby
# Reload models after changes
reload!

# See all associations
Song.reflect_on_all_associations.map(&:name)

# Check table structure
Song.column_names
```

### Docker Commands
```bash
# Rebuild containers
docker-compose down
docker-compose build --no-cache
docker-compose up

# View logs
docker-compose logs -f

# Access container shell
docker-compose exec web bash
```

## 🎨 UI/UX Considerations

### Color Coding
- Genres have color attributes for visual organization
- Default gray (#6B7280) if no color specified
- Use `genre.color_or_default` for consistent display

### File Uploads
- Supported audio formats: mp3, m4a, mp4, ogg, flac, wav, aac
- File validation happens automatically
- Use Active Storage for file management

### Playlist Features
- Playlists belong to users but can be public/private
- Songs in playlists have position ordering
- Use `playlist.songs.order(:position)` for proper ordering

## 🚀 Performance Tips

### Database Indexes
- Foreign keys are automatically indexed
- Composite indexes on (album_id, track_number) for songs
- Unique constraints prevent duplicates

### Query Optimization
```ruby
# Use includes to avoid N+1 queries
songs = Song.includes(:album, :genre, :artist).all

# Use joins for filtering
songs = Song.joins(:genre).where(genres: { name: "Rock" })
```

### Caching Strategies
- Consider caching genre counts
- Cache user playlists
- Use fragment caching for song lists

## 🔒 Security Notes

### User Authentication
- Passwords are hashed with bcrypt
- Session management through Rails sessions
- Role-based access control

### File Upload Security
- Content type validation on uploads
- File size limits can be configured
- Virus scanning recommended for production

## 📊 Data Management

### Seeding Data
```ruby
# Create sample data
genres = ["Rock", "Jazz", "Pop", "Classical", "Hip Hop"].map do |name|
  Genre.create(name: name, color: "#" + SecureRandom.hex(3))
end
```

### Data Export/Import
```ruby
# Export songs to CSV
require 'csv'
CSV.open("songs.csv", "w") do |csv|
  csv << ["Title", "Album", "Artist", "Genre"]
  Song.includes(:album, :genre).each do |song|
    csv << [song.title, song.album.title, song.artist.name, song.genre.name]
  end
end
```

## 🐛 Common Issues & Solutions

### Migration Issues
- If migrations fail, check PostgreSQL is running
- Use `rails db:reset` to start fresh
- Check foreign key constraints

### Docker Issues
- If containers won't start, check port conflicts
- Use `docker system prune` to clean up
- Rebuild containers if dependencies change

### File Upload Issues
- Check Active Storage is configured
- Verify file permissions
- Test with small files first

## 📈 Future Enhancements

### Planned Features
- Audio streaming capabilities
- Advanced search and filtering
- User ratings and reviews
- Social features (sharing playlists)
- API endpoints for mobile apps

### Scalability Considerations
- Consider Redis for caching
- Implement background job processing
- Plan for CDN integration
- Database partitioning for large datasets

---

**Last Updated**: July 2025
**Version**: 1.0.0
**Rails Version**: 8.0
**Database**: PostgreSQL 