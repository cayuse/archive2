<div class="container">
  <div class="row">
    <div class="col-12">
      <!-- Notice Container -->
      <div id="notice-container"></div>
      
      <!-- Page Header -->
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0">Albums</h1>
      </div>
      
      <!-- Search Bar -->
      <div class="card mb-4">
        <div class="card-body">
          <div class="row">
            <div class="col-md-8">
              <input type="text" id="search-input" class="form-control" placeholder="Search albums..." autocomplete="off" value="<%= params[:q] %>">
            </div>
            <div class="col-md-4">
              <button id="clear-search" class="btn btn-outline-secondary" style="<%= 'display: none;' unless params[:q].present? %>">Clear Search</button>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Albums Table -->
      <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5 class="mb-0">All Albums</h5>
          <div class="d-flex align-items-center gap-3">
            <div id="album-count" class="theme-text-muted"></div>
          </div>
        </div>
        <div class="card-body">
          <% if @albums.any? %>
            <div class="table-responsive">
              <table class="table table-hover album-list-table">
                <thead>
                  <tr>
                    <th>Title</th>
                    <th>Artist</th>
                    <th>Songs</th>
                    <th>Release Date</th>
                    <th>Created</th>
                  </tr>
                </thead>
                <tbody id="albums-table-body">
                  <%= render partial: 'album_list', locals: { albums: @albums } %>
                </tbody>
              </table>
            </div>
            
            <!-- Pagination -->
            <% if @albums.respond_to?(:current_page) %>
              <div class="d-flex justify-content-center mt-4">
                <%= paginate @albums if respond_to?(:paginate) %>
              </div>
            <% end %>
          <% else %>
            <div class="text-center py-4">
              <p class="theme-text-muted">No albums found.</p>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
// Notice system functions
window.showNotice = function(message, type = 'success') {
  const noticeContainer = document.getElementById('notice-container');
  if (!noticeContainer) return;
  
  const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
  const noticeHtml = `
    <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
  `;
  
  noticeContainer.innerHTML = noticeHtml;
  
  // Auto-dismiss after 5 seconds
  setTimeout(() => {
    const alert = noticeContainer.querySelector('.alert');
    if (alert) {
      alert.remove();
    }
  }, 5000);
};

function initializeSearch() {
  console.log('Initializing album search functionality');
  
  let searchTimeout;
  
  const searchInput = document.getElementById('search-input');
  const clearSearchBtn = document.getElementById('clear-search');
  const albumsTableBody = document.getElementById('albums-table-body');
  const albumCountDiv = document.getElementById('album-count');
  
  if (!searchInput || !albumsTableBody) {
    console.error('Required search elements not found!');
    return;
  }
  
  // Live search functionality
  searchInput.addEventListener('input', function() {
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(function() {
      const query = searchInput.value.trim();
      performSearch(query);
    }, 300); // Debounce search
  });
  
  // Clear search
  clearSearchBtn.addEventListener('click', function() {
    searchInput.value = '';
    performSearch('');
    clearSearchBtn.style.display = 'none';
  });
  
  function performSearch(query) {
    const params = new URLSearchParams({
      q: query,
      page: 1
    });
    
    fetch(`/albums/search?${params}`)
      .then(response => response.text())
      .then(html => {
        albumsTableBody.innerHTML = html;
        
        // Update album count
        const albumCount = albumsTableBody.querySelectorAll('tr').length;
        albumCountDiv.textContent = `${albumCount} albums`;
        
        // Show/hide clear search button
        if (query) {
          clearSearchBtn.style.display = 'block';
        }
        
        // Update URL to reflect search
        const url = new URL(window.location);
        if (query) {
          url.searchParams.set('q', query);
        } else {
          url.searchParams.delete('q');
        }
        url.searchParams.delete('page');
        window.history.replaceState({}, '', url);
      })
      .catch(error => {
        console.error('Error loading albums:', error);
      });
  }
  
  // Initialize album count
  const initialCount = albumsTableBody.querySelectorAll('tr').length;
  albumCountDiv.textContent = `${initialCount} albums`;
}

// Initialize on both Turbo and regular page load
document.addEventListener('turbo:load', initializeSearch);
document.addEventListener('DOMContentLoaded', initializeSearch);
</script> 