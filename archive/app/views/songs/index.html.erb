<div class="container">
  <div class="row">
    <div class="col-12">
      <!-- Notice Container -->
      <div id="notice-container"></div>
      
      <!-- Page Header -->
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0">Songs</h1>
        <% if policy(Song.new).upload_audio? %>
          <%= link_to upload_path, class: "btn btn-primary" do %>
            <i class="fas fa-plus me-2"></i>Upload Song
          <% end %>
        <% end %>
      </div>
      
      <!-- Search Bar -->
      <div class="card mb-4">
        <div class="card-body">
          <div class="row">
            <div class="col-md-8">
              <input type="text" id="search-input" class="form-control" placeholder="Search songs, artists, albums, or genres..." autocomplete="off">
            </div>
            <div class="col-md-4">
              <button id="clear-search" class="btn btn-outline-secondary" style="display: none;">Clear Search</button>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Songs Table -->
      <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5 class="mb-0">All Songs</h5>
          <div class="d-flex align-items-center gap-3">
            <div id="song-count" class="theme-text-muted"></div>
            <div class="dropdown">
              <button class="btn btn-outline-primary btn-sm dropdown-toggle" type="button" id="addToPlaylistDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fas fa-plus me-1"></i>Add to Playlist
              </button>
              <ul class="dropdown-menu" aria-labelledby="addToPlaylistDropdown">
                <li><h6 class="dropdown-header">Select Playlist</h6></li>
                <% current_user.playlists.each do |playlist| %>
                  <li><a class="dropdown-item playlist-option" href="#" data-playlist-id="<%= playlist.id %>" data-playlist-name="<%= playlist.name %>" onclick="if (typeof addSelectedSongsToPlaylist === 'function') { addSelectedSongsToPlaylist('<%= playlist.id %>', '<%= j(playlist.name) %>'); } else { console.error('addSelectedSongsToPlaylist is not defined'); } return false;"><%= playlist.name %></a></li>
                <% end %>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="#" id="createNewPlaylistOption" onclick="if (typeof showCreatePlaylistModal === 'function') { showCreatePlaylistModal(); } else { console.error('showCreatePlaylistModal is not defined'); } return false;"><i class="fas fa-plus me-2"></i>Create New Playlist</a></li>
              </ul>
            </div>
          </div>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-hover song-list-table">
              <thead>
                <tr>
                  <th style="width: 40px;">
                    <input type="checkbox" class="form-check-input" id="select-all-songs">
                  </th>
                  <th>Title</th>
                  <th>Artist</th>
                  <th>Album</th>
                  <th>Genre</th>
                  <th>Duration</th>
                  <th>Play</th>
                </tr>
              </thead>
              <tbody id="songs-table-body">
                <%= render partial: 'song_list', locals: { songs: @songs } %>
              </tbody>
            </table>
          </div>
          
          <!-- Pagination -->
          <% if @songs.respond_to?(:current_page) %>
            <div class="d-flex justify-content-between align-items-center mt-3">
              <div class="text-muted">
                Showing <%= @songs.offset_value + 1 %> to <%= @songs.offset_value + @songs.length %> of <%= @songs.total_count %> songs
              </div>
                              <div>
                  <%= paginate @songs %>
                </div>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
// Ensure playlist functions are available immediately
// Notice system functions
window.showNotice = function(message, type = 'success') {
  const noticeContainer = document.getElementById('notice-container');
  if (!noticeContainer) return;
  
  const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
  const noticeHtml = `
    <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
  `;
  
  noticeContainer.innerHTML = noticeHtml;
  
  // Auto-dismiss after 5 seconds
  setTimeout(() => {
    const alert = noticeContainer.querySelector('.alert');
    if (alert) {
      alert.remove();
    }
  }, 5000);
};

window.addSelectedSongsToPlaylist = function(playlistId, playlistName) {
  console.log('addSelectedSongsToPlaylist called with:', playlistId, playlistName);
  
  const selectedSongs = document.querySelectorAll('.song-select-checkbox:checked');
  const songIds = Array.from(selectedSongs).map(checkbox => checkbox.value);
  
  if (songIds.length === 0) {
    showNotice('Please select at least one song to add to the playlist.', 'danger');
    return;
  }
  
  console.log(`Adding ${songIds.length} songs to playlist: ${playlistName}`);
  
  // Use fetch instead of HTMX for better control
  fetch(`/playlists/${playlistId}/add_songs`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
      'X-Requested-With': 'XMLHttpRequest'
    },
    body: JSON.stringify({ song_ids: songIds })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      // Show success message
      const message = `${data.message} (${songIds.length} songs added to "${data.playlist_name}")`;
      showNotice(message, 'success');
      
      // Clear selections
      selectedSongs.forEach(checkbox => checkbox.checked = false);
      updatePlaylistButtonState();
      updateSelectAllCheckbox();
    } else {
      showNotice(data.error || 'Failed to add songs to playlist', 'danger');
    }
  })
  .catch(error => {
    console.error('Error adding songs to playlist:', error);
    showNotice('Error adding songs to playlist', 'danger');
  });
};

window.showCreatePlaylistModal = function() {
  console.log('showCreatePlaylistModal called');
  
  const playlistName = prompt('Enter playlist name:');
  if (playlistName && playlistName.trim()) {
    const selectedSongs = document.querySelectorAll('.song-select-checkbox:checked');
    const songIds = Array.from(selectedSongs).map(checkbox => checkbox.value);
    
    if (songIds.length === 0) {
      showNotice('Please select at least one song to add to the new playlist.', 'danger');
      return;
    }
    
    console.log(`Creating new playlist "${playlistName}" with ${songIds.length} songs`);
    
    // Create playlist and add songs
    fetch('/playlists', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
        'X-Requested-With': 'XMLHttpRequest'
      },
      body: JSON.stringify({ 
        playlist: { name: playlistName.trim(), is_public: false },
        song_ids: songIds 
      })
    })
    .then(response => {
      if (response.redirected) {
        // Redirect to the new playlist
        window.location.href = response.url;
      } else {
        return response.json();
      }
    })
    .then(data => {
      if (data && data.success) {
        showNotice(`Created playlist "${playlistName}" with ${songIds.length} songs`, 'success');
        
        // Clear selections
        selectedSongs.forEach(checkbox => checkbox.checked = false);
        updatePlaylistButtonState();
        updateSelectAllCheckbox();
      } else if (data) {
        showNotice(data.error || 'Failed to create playlist', 'danger');
      }
    })
    .catch(error => {
      console.error('Error creating playlist:', error);
      showNotice('Error creating playlist', 'danger');
    });
  }
};

// Helper functions for playlist functionality
function updatePlaylistButtonState() {
  const selectedSongs = document.querySelectorAll('.song-select-checkbox:checked');
  const dropdownButton = document.getElementById('addToPlaylistDropdown');
  
  if (dropdownButton) {
    if (selectedSongs.length > 0) {
      dropdownButton.disabled = false;
      dropdownButton.textContent = `Add to Playlist (${selectedSongs.length})`;
    } else {
      dropdownButton.disabled = true;
      dropdownButton.innerHTML = '<i class="fas fa-plus me-1"></i>Add to Playlist';
    }
  }
}

function updateSelectAllCheckbox() {
  const selectAllCheckbox = document.getElementById('select-all-songs');
  const songCheckboxes = document.querySelectorAll('.song-select-checkbox');
  const checkedCheckboxes = document.querySelectorAll('.song-select-checkbox:checked');
  
  if (selectAllCheckbox) {
    if (checkedCheckboxes.length === 0) {
      selectAllCheckbox.checked = false;
      selectAllCheckbox.indeterminate = false;
    } else if (checkedCheckboxes.length === songCheckboxes.length) {
      selectAllCheckbox.checked = true;
      selectAllCheckbox.indeterminate = false;
    } else {
      selectAllCheckbox.checked = false;
      selectAllCheckbox.indeterminate = true;
    }
  }
}

function initializeSearch() {
  console.log('Initializing search functionality');
  
  let searchTimeout;
  let currentlyPlaying = null;
  
  const searchInput = document.getElementById('search-input');
  const clearSearchBtn = document.getElementById('clear-search');
  const songsTableBody = document.getElementById('songs-table-body');
  const songCountDiv = document.getElementById('song-count');
  
  console.log('Search input element:', searchInput);
  console.log('Songs table body element:', songsTableBody);
  
  if (!searchInput) {
    console.error('Search input not found!');
    return;
  }
  
  if (!songsTableBody) {
    console.error('Songs table body not found!');
    return;
  }
  
  // Live search functionality
  searchInput.addEventListener('input', function() {
    console.log('Search input event triggered');
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(function() {
      const query = searchInput.value.trim();
      console.log('Searching for:', query);
      performSearch(query);
    }, 300); // Debounce search
  });
  
  // Clear search
  clearSearchBtn.addEventListener('click', function() {
    searchInput.value = '';
    performSearch('');
    clearSearchBtn.style.display = 'none';
  });
  
  function performSearch(query) {
    const params = new URLSearchParams({
      q: query,
      page: 1
    });
    
    console.log('Fetching from:', `/songs/search?${params}`);
    fetch(`/songs/search?${params}`)
      .then(response => response.text())
      .then(html => {
        songsTableBody.innerHTML = html;
        
        // Re-initialize audio players after loading new content
        initializeAudioPlayers();
        
        // Update song count
        const songCount = songsTableBody.querySelectorAll('tr').length;
        songCountDiv.textContent = `${songCount} songs`;
        
        // Show/hide clear search button
        if (query) {
          clearSearchBtn.style.display = 'block';
        }
        
        // Update URL to reflect search
        const url = new URL(window.location);
        if (query) {
          url.searchParams.set('q', query);
        } else {
          url.searchParams.delete('q');
        }
        url.searchParams.delete('page');
        window.history.replaceState({}, '', url);
      })
      .catch(error => {
        console.error('Error loading songs:', error);
      });
  }
  
  // Initialize song count
  const initialCount = songsTableBody.querySelectorAll('tr').length;
  songCountDiv.textContent = `${initialCount} songs`;
  
  // Audio Player Functionality
  function initializeAudioPlayers() {
    const playButtons = document.querySelectorAll('.play-btn');
    
    playButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        const audioId = this.getAttribute('data-audio-id');
        const songTitle = this.getAttribute('data-song-title');
        const audio = document.getElementById(`audio-${audioId}`);
        const timeSpan = document.getElementById(`time-${audioId}`);
        const icon = this.querySelector('i');
        
        if (!audio) {
          console.error('Audio element not found for ID:', audioId);
          return;
        }
        
        // Stop any currently playing audio
        if (currentlyPlaying && currentlyPlaying !== audio) {
          const currentButton = document.querySelector(`[data-audio-id="${currentlyPlaying.id.replace('audio-', '')}"]`);
          if (currentButton) {
            const currentIcon = currentButton.querySelector('i');
            currentIcon.className = 'fas fa-play';
            currentButton.classList.remove('btn-primary');
            currentButton.classList.add('btn-outline-primary');
          }
          currentlyPlaying.pause();
          currentlyPlaying.currentTime = 0;
        }
        
        if (audio.paused) {
          // Play the audio
          audio.play().then(() => {
            currentlyPlaying = audio;
            icon.className = 'fas fa-pause';
            this.classList.remove('btn-outline-primary');
            this.classList.add('btn-primary');
          }).catch(error => {
            console.error('Error playing audio:', error);
            showNotice('Error playing audio file: ' + error.message, 'danger');
          });
        } else {
          // Pause the audio
          audio.pause();
          icon.className = 'fas fa-play';
          this.classList.remove('btn-primary');
          this.classList.add('btn-outline-primary');
          currentlyPlaying = null;
        }
      });
    });
    
    // Add time update listeners for all audio elements
    const audioElements = document.querySelectorAll('audio');
    audioElements.forEach(audio => {
      audio.addEventListener('timeupdate', function() {
        const audioId = this.id.replace('audio-', '');
        const timeSpan = document.getElementById(`time-${audioId}`);
        const currentTime = Math.floor(this.currentTime);
        const duration = Math.floor(this.duration);
        
        if (!isNaN(duration)) {
          const currentMinutes = Math.floor(currentTime / 60);
          const currentSeconds = currentTime % 60;
          const totalMinutes = Math.floor(duration / 60);
          const totalSeconds = duration % 60;
          
          timeSpan.textContent = `${currentMinutes}:${currentSeconds.toString().padStart(2, '0')} / ${totalMinutes}:${totalSeconds.toString().padStart(2, '0')}`;
        }
      });
      
      audio.addEventListener('ended', function() {
        const audioId = this.id.replace('audio-', '');
        const button = document.querySelector(`[data-audio-id="${audioId}"]`);
        const icon = button.querySelector('i');
        icon.className = 'fas fa-play';
        button.classList.remove('btn-primary');
        button.classList.add('btn-outline-primary');
        currentlyPlaying = null;
        
        const timeSpan = document.getElementById(`time-${audioId}`);
        timeSpan.textContent = '--:--';
      });
      
      audio.addEventListener('loadedmetadata', function() {
        const audioId = this.id.replace('audio-', '');
        const timeSpan = document.getElementById(`time-${audioId}`);
        const duration = Math.floor(this.duration);
        
        if (!isNaN(duration)) {
          const minutes = Math.floor(duration / 60);
          const seconds = duration % 60;
          timeSpan.textContent = `0:00 / ${minutes}:${seconds.toString().padStart(2, '0')}`;
        }
      });
    });
  }
  
  // Initialize audio players when page loads
  initializeAudioPlayers();
}

// Initialize on both Turbo and regular page load
document.addEventListener('turbo:load', initializeSearch);
document.addEventListener('DOMContentLoaded', initializeSearch);

// Initialize playlist functionality
document.addEventListener('turbo:load', function() {
  console.log('Initializing playlist functionality...');
  
  // Select all checkbox
  const selectAllCheckbox = document.getElementById('select-all-songs');
  if (selectAllCheckbox) {
    selectAllCheckbox.addEventListener('change', function() {
      const songCheckboxes = document.querySelectorAll('.song-select-checkbox');
      songCheckboxes.forEach(checkbox => {
        checkbox.checked = this.checked;
      });
      updatePlaylistButtonState();
    });
  }
  
  // Individual song checkboxes
  document.addEventListener('change', function(e) {
    if (e.target.classList.contains('song-select-checkbox')) {
      updatePlaylistButtonState();
      updateSelectAllCheckbox();
    }
  });
  
  // Initialize button state
  updatePlaylistButtonState();
  
  // Event delegation for create new playlist option
  document.addEventListener('click', function(e) {
    const createNewPlaylistOption = document.getElementById('createNewPlaylistOption');
    if (createNewPlaylistOption && createNewPlaylistOption.contains(e.target)) {
      e.preventDefault(); // Prevent default link behavior
      showCreatePlaylistModal();
    }
  });
  
  console.log('Playlist functions available:', {
    addSelectedSongsToPlaylist: typeof window.addSelectedSongsToPlaylist,
    showCreatePlaylistModal: typeof window.showCreatePlaylistModal,
    testPlaylistFunctions: typeof window.testPlaylistFunctions
  });
});

document.addEventListener('DOMContentLoaded', function() {
  console.log('DOMContentLoaded - Initializing playlist functionality...');
  
  // Select all checkbox
  const selectAllCheckbox = document.getElementById('select-all-songs');
  if (selectAllCheckbox) {
    selectAllCheckbox.addEventListener('change', function() {
      const songCheckboxes = document.querySelectorAll('.song-select-checkbox');
      songCheckboxes.forEach(checkbox => {
        checkbox.checked = this.checked;
      });
      updatePlaylistButtonState();
    });
  }
  
  // Individual song checkboxes
  document.addEventListener('change', function(e) {
    if (e.target.classList.contains('song-select-checkbox')) {
      updatePlaylistButtonState();
      updateSelectAllCheckbox();
    }
  });
  
  // Initialize button state
  updatePlaylistButtonState();
  
  // Event delegation for create new playlist option
  document.addEventListener('click', function(e) {
    const createNewPlaylistOption = document.getElementById('createNewPlaylistOption');
    if (createNewPlaylistOption && createNewPlaylistOption.contains(e.target)) {
      e.preventDefault(); // Prevent default link behavior
      showCreatePlaylistModal();
    }
  });
  
  console.log('DOMContentLoaded - Playlist functions available:', {
    addSelectedSongsToPlaylist: typeof window.addSelectedSongsToPlaylist,
    showCreatePlaylistModal: typeof window.showCreatePlaylistModal,
    testPlaylistFunctions: typeof window.testPlaylistFunctions
  });
});
</script> 